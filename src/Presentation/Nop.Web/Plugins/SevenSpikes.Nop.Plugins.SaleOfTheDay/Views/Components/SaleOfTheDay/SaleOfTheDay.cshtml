@using Newtonsoft.Json

@model SaleOfTheDayListModel

@inject SaleOfTheDaySettings saleOfTheDaySettings
@inject IViewComponentSelector viewComponentSelector
@inject IWorkContext workContext
@inject ISettingService settingService

@{
	var saleOfTheDayCssFilePath = "~/Plugins/SevenSpikes.Nop.Plugins.SaleOfTheDay/Themes/" + Model.Theme + "/Content/SaleOfTheDay.css";

	var supportRtlClass = string.Empty;

	var supportRtl = (await workContext.GetWorkingLanguageAsync()).Rtl;

	bool hasAnySpecialPrice = Model.SaleOfTheDayOffers.Any(x => x.Products.Any(p => p.SpecialPriceEndDate.HasValue));
}

<link rel="stylesheet" href="~/Plugins/SevenSpikes.Core/Styles/slick-slider-1.6.0.css" />
<link rel="stylesheet" href="@saleOfTheDayCssFilePath" />

@if (supportRtl)
{
	var saleOfTheDayRtlCssFilePath = "~/Plugins/SevenSpikes.Nop.Plugins.SaleOfTheDay/Themes/" + Model.Theme + "/Content/SaleOfTheDay.rtl.css";

	<link rel="stylesheet" href="@saleOfTheDayRtlCssFilePath" />

	supportRtlClass = "support-rtl";
}

<script src="~/Plugins/SevenSpikes.Core/Scripts/slick-slider-1.6.0.min.js" asp-location="Footer"></script>
<script src="~/Plugins/SevenSpikes.Nop.Plugins.SaleOfTheDay/Scripts/SaleOfTheDay.min.js" asp-location="Footer"></script>

@if (hasAnySpecialPrice && saleOfTheDaySettings.ShowSpecialPriceCountdownTimer)
{
	<script src="~/Plugins/SevenSpikes.Core/Scripts/sevenspikes.core.min.js" asp-location="Footer"></script>
	<script src="~/Plugins/SevenSpikes.Nop.Plugins.SaleOfTheDay/Scripts/SaleOfTheDay.countdown.timer.min.js" asp-location="Footer"></script>
}

<div class="sale-of-the-day-offer @supportRtlClass">
	@foreach (var offer in Model.SaleOfTheDayOffers)
	{
		// Theme settings are with priority
		var slickSettings = await settingService.GetSettingByKeyAsync<string>($"SaleOfTheDaySettings.SlickSliderSettings-{Model.Theme}");

		if (string.IsNullOrEmpty(slickSettings))
		{
			slickSettings = saleOfTheDaySettings.SlickSliderSettings;
		}

		// Theme settings are with priority
		var responsiveSettings = await settingService.GetSettingByKeyAsync<string>($"SaleOfTheDaySettings.SlickSliderResponsiveBreakpoints-{Model.Theme}");

		if (string.IsNullOrEmpty(responsiveSettings))
		{
			responsiveSettings = saleOfTheDaySettings.SlickSliderResponsiveBreakpoints;
		}

		// Arrows container HTML ELEMENT must have explicit class name for each offer: slick-arrows-@offer.Id
		// Arrows container ADMIN SETTING must have explicit value for each offer: .slick-arrows-{0}
		var slickSettingsDictionary = JsonConvert.DeserializeObject<Dictionary<string, object>>(slickSettings);
		if (slickSettingsDictionary.ContainsKey("appendArrows"))
		{
			slickSettingsDictionary["appendArrows"] = string.Format(slickSettingsDictionary["appendArrows"].ToString(), offer.Id);
		}

		// Add the autoplay setting value from the plugin administration.
		if (saleOfTheDaySettings.AutoPlay)
		{
			slickSettingsDictionary.Add("autoplay", true);
		}

		if (supportRtl)
		{
			slickSettingsDictionary.Add("rtl", true);
		}

		if (!string.IsNullOrEmpty(responsiveSettings))
		{
			// Deserialize the responsive settings to prevent double serializing.
			var responsive = JsonConvert.DeserializeObject(responsiveSettings);

			slickSettingsDictionary.Add("responsive", responsive);
		}

		var slickSettingsJson = JsonConvert.SerializeObject(slickSettingsDictionary);

		<div class="title slick-arrows-@offer.Id">
			<strong>@offer.Title</strong>
		</div>
		<div class="grid @if (offer.Products.Count > 1) {<text>slick-carousel</text>}" data-slick="@slickSettingsJson">
			@foreach (var product in offer.Products)
			{
				<div class="product-element sale-of-the-day-product-@offer.Id-@product.ProductOverviewModel.Id" data-productid="@product.ProductOverviewModel.Id">
					<div class="sale-item @if (product.SpecialPriceEndDate.HasValue) {<text>timed-offer</text>}">
						<div class="item-gallery">
							<div class="item-picture">
								<a href="@(Url.RouteUrl<Product>( new { SeName = product.ProductOverviewModel.SeName }))" title="@product.ProductOverviewModel.Name">
									@if (viewComponentSelector.SelectComponent("LazyLoadImage") != null)
									{
										@await Component.InvokeAsync("LazyLoadImage", new (string Key, string Value)[]
										{
										("src", product.ProductOverviewModel.PictureModels[0].ImageUrl),
										("alt", product.ProductOverviewModel.PictureModels[0].AlternateText),
										("title", product.ProductOverviewModel.PictureModels[0].Title)
										})
									}
									else
									{
										<img alt="@product.ProductOverviewModel.PictureModels[0].AlternateText" src="@product.ProductOverviewModel.PictureModels[0].ImageUrl" title="@product.ProductOverviewModel.PictureModels[0].Title" />
									}
								</a>
							</div>
							@if (product.PictureModels != null && product.PictureModels.Count > 1)
							{
								<div class="picture-thumbs">
									@foreach (var picture in product.PictureModels)
									{
										<a class="thumb-item" href="@picture.FullSizeImageUrl" title="@product.ProductOverviewModel.Name">
											@if (viewComponentSelector.SelectComponent("LazyLoadImage") != null)
											{
												@await Component.InvokeAsync("LazyLoadImage", new (string Key, string Value)[]
												{
												("src", picture.ImageUrl),
												("alt", picture.AlternateText),
												("title", picture.Title)
												})
											}
											else
											{
												<img src="@picture.ImageUrl" alt="@picture.AlternateText" title="@picture.Title" />
											}
										</a>
									}
								</div>
								<script asp-location="Footer">
									$(document).ready(function () {
										$('.sale-of-the-day-offer').on('click', '.sale-of-the-day-product-@offer.Id-@product.ProductOverviewModel.Id .thumb-item', function (e) {
											e.preventDefault();

											var that = $(this);
											var fullImageUrl = that.attr('href');

											if (fullImageUrl == undefined || fullImageUrl == '') {
												return;
											}
											$('.sale-of-the-day-product-@offer.Id-@product.ProductOverviewModel.Id').find(".item-picture img").each(function () {
												$(this).attr('src', fullImageUrl);
											});
										});
									});
								</script>
							}
						</div>
						<div class="overview">
							<div class="product-name">
								<h2 class="item-name">
									<a href="@(Url.RouteUrl<Product>( new { SeName = product.ProductOverviewModel.SeName }))">@product.ProductOverviewModel.Name</a>
								</h2>
							</div>
							@if (!String.IsNullOrEmpty(product.ProductOverviewModel.ShortDescription))
							{
								<div class="short-description">
									@Html.Raw(product.ProductOverviewModel.ShortDescription)
								</div>
							}
							@if (saleOfTheDaySettings.ShowSpecialPriceCountdownTimer)
							{
								if (product.SpecialPriceEndDate.HasValue)
								{
									int dateTimeDifference = (int)(product.SpecialPriceEndDate.Value - DateTime.UtcNow).TotalSeconds;

									<div class="countdown-timer" data-time="@dateTimeDifference">
										<div class="timer-group days">
											<span class="timer-info-box"></span>
											<span class="timer-info-text"></span>
										</div>
										<div class="timer-group hours">
											<span class="timer-info-box"></span>
											<span class="timer-info-text"></span>
										</div>
										<div class="timer-group minutes">
											<span class="timer-info-box"></span>
											<span class="timer-info-text"></span>
										</div>
										<div class="timer-group seconds">
											<span class="timer-info-box"></span>
											<span class="timer-info-text"></span>
										</div>
									</div>
								}
							}
							<div class="prices">
								@if (!String.IsNullOrEmpty(product.ProductOverviewModel.ProductPrice.OldPrice))
								{
									<span class="price old-price">@product.ProductOverviewModel.ProductPrice.OldPrice</span>
								}
								<span class="price actual-price">@product.ProductOverviewModel.ProductPrice.Price</span>
								@if (product.ProductOverviewModel.ProductPrice.DisplayTaxShippingInfo)
								{
									var inclTax = await workContext.GetTaxDisplayTypeAsync() == TaxDisplayType.IncludingTax;
									//tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
									//of course, you can modify appropriate locales to include VAT info there
									<div class="tax-shipping-info">
										@T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteTopicUrl("shippinginfo"))
									</div>
								}
							</div>
							<a href="@(Url.RouteUrl<Product>( new { SeName = product.ProductOverviewModel.SeName }))" class="go-to-product-page">@T("SevenSpikes.SaleOfTheDay.Public.GoToProductPage")</a>
						</div>
						@*
						@if (!String.IsNullOrEmpty(product.ProductOverviewModel.FullDescription))
						{
							<div class="full-description" itemprop="description">
								@Html.Raw(product.ProductOverviewModel.FullDescription)
							</div>
						}
						*@
					</div>
				</div>
			}
		</div>
	}
	<input type="hidden" id="saleOfTheDayInfo"
		   data-localization-day="@T("SevenSpikes.Plugins.SaleOfTheDay.Public.Day")" data-localization-days="@T("SevenSpikes.Plugins.SaleOfTheDay.Public.Days")"
		   data-localization-hour="@T("SevenSpikes.Plugins.SaleOfTheDay.Public.Hour")" data-localization-hours="@T("SevenSpikes.Plugins.SaleOfTheDay.Public.Hours")"
		   data-localization-minute="@T("SevenSpikes.Plugins.SaleOfTheDay.Public.Minute")" data-localization-minutes="@T("SevenSpikes.Plugins.SaleOfTheDay.Public.Minutes")"
		   data-localization-second="@T("SevenSpikes.Plugins.SaleOfTheDay.Public.Second")" data-localization-seconds="@T("SevenSpikes.Plugins.SaleOfTheDay.Public.Seconds")">
</div>