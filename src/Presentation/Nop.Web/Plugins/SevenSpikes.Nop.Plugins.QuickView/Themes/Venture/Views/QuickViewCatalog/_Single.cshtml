@using Nop.Core.Domain.Orders

@inject QuickViewSettings quickViewSettings

@model ProductDetailsModel
@*The script is copied from the _BackInStockSubscription.cshtml
    because the script is in the footer so it is not loaded in the QuickView.*@
@{
    if (Model.DisplayBackInStockSubscription)
    {
        <script type="text/javascript">
            $(document).ready(function () {
                $("#back-in-stock-subscribe-@Model.Id").on('click', function() {
                    displayPopupContentFromUrl('@Url.RouteUrl("BackInStockSubscribePopup", new { productId = Model.Id })', '@T("BackInStockSubscriptions.NotifyMeWhenAvailable")');

                    // Close the Quick View window.
                    var kwindow = $(".quickViewWindow").data("kendoWindow");

                    if (kwindow != undefined && kwindow.content() !== "") {
                        kwindow.close();
                    }
                });
            });
        </script>
    }
}

<input id="add-to-cart-details" type="hidden"
       data-productid="@Model.Id"
       data-url="@Url.RouteUrl("AddProductToCart-Details", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart })" />

<input id="add-to-wishlist-details" type="hidden"
       data-productid="@Model.Id"
       data-url="@Url.RouteUrl("AddProductToCart-Details", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist })" />

<div class="product-essential">
    <form asp-route="Product" asp-route-sename="@Model.SeName" method="post" id="product-details-form">

        <div class="product-content">
            <div class="gallery">
                <!--product pictures-->
                @await Component.InvokeAsync("NopQuickViewProductPictures", new { model = Model })
            </div>
            <div class="overview">
                <div class="popup-header">
                    <h1 class="product-name">
                        @Model.Name
                    </h1>
                </div>
                <div id="accordion">
                    <h3>@T("SevenSpikes.QuickView.Public.ProductDetails")</h3>
                    <div class="product-details">
                        <div class="left">
                            <!--manufacturers-->
                            @await Html.PartialAsync("_ProductManufacturers", Model.ProductManufacturers)

                            <!--SKU, MAN, GTIN, vendor-->
                            @await Html.PartialAsync("_SKU_Man_GTIN_Ven", Model)

                            <!--delivery-->
                            @await Html.PartialAsync("_DeliveryInfo", Model)

                            @if (Model.AddToCart.CustomerEntersPrice)
                            {
                                <div class="customer-entered-price">
                                    <div class="price-input">
                                        <label for="addtocart_@(Model.Id)_CustomerEnteredPrice" class="enter-price-label">@T("Products.EnterProductPrice")</label>
                                        @*round price*@
                                        <input type="text" id="addtocart_@(Model.Id)_CustomerEnteredPrice" name="addtocart_@(Model.Id).CustomerEnteredPrice" value="@Convert.ToInt32(Math.Ceiling(Model.AddToCart.CustomerEnteredPrice))" class="enter-price-input" />
                                    </div>
                                    <div class="price-range">
                                        *@Model.AddToCart.CustomerEnteredPriceRange
                                    </div>
                                </div>
                            }

                            <div class="purchase-area">
                                @{
                                    var dataDictPrice = new ViewDataDictionary(ViewData);
                                    dataDictPrice.TemplateInfo.HtmlFieldPrefix = $"price_{Model.Id}";
                                    @await Html.PartialAsync("_ProductPrice", Model.ProductPrice, dataDictPrice)
                                }
                            </div>
                        </div>
                        <div class="right">
                            <!--availability-->
                            @if (!String.IsNullOrWhiteSpace(Model.StockAvailability))
                            {
                                <div class="availability">
                                    <div class="stock">
                                        <span class="label">@T("Products.Availability"):</span>
                                        <span class="value" id="stock-availability-value-@Model.Id">@Model.StockAvailability</span>
                                    </div>
                                </div>
                            }
                        </div>

                        <!--attributes-->
                        @{
                            var dataDictAttributes = new ViewDataDictionary(ViewData);
                            dataDictAttributes.TemplateInfo.HtmlFieldPrefix = $"attributes_{Model.Id}";
                            @await Html.PartialAsync("_QuickViewProductAttributes", Model, dataDictAttributes)
                        }

                        @if (Model.IsRental)
                        {
                            @await Html.PartialAsync("_QuickViewRentalInfo", Model)
                        }

                        <!--gift card-->
                        @{
                            var dataDictGiftCard = new ViewDataDictionary(ViewData);
                            dataDictGiftCard.TemplateInfo.HtmlFieldPrefix = $"giftcard_{Model.Id}";
                            @await Html.PartialAsync("_GiftCardInfo", Model.GiftCard, dataDictGiftCard)
                        }

                        <!--product tier prices-->
                        @await Html.PartialAsync("_ProductTierPrices", Model.TierPrices)

                        <div class="overview-buttons">
                            @{
                                var dataDictAddToCart = new ViewDataDictionary(ViewData);
                                dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
                                @await Html.PartialAsync("_AddToCart", Model.AddToCart, dataDictAddToCart)
                            }

                            @if (!Model.AddToCart.DisableWishlistButton && quickViewSettings.ShowAddToWishlistButton)
                            {
                                <div class="wishlist-button-wrapper" title="@T("ShoppingCart.AddToWishlist")">
                                    <div class="add-to-wishlist">
                                        <button type="button" class="button-2 add-to-wishlist-button" data-productid="@Model.AddToCart.ProductId" onclick="AjaxCart.addproducttocart_details('@Url.RouteUrl("AddProductToCart-Details", new { productId = Model.AddToCart.ProductId, shoppingCartTypeId = (int)ShoppingCartType.Wishlist })    ', '#product-details-form');return false;">@T("ShoppingCart.AddToWishlist")</button>
                                    </div>
                                </div>
                            }
                            @if (quickViewSettings.ShowCompareProductsButton)
                            {
                                <div class="compare-products-wrapper" title="@T("products.compare.addtocomparelist")">
                                    @await Html.PartialAsync("_CompareProductsButton", Model)
                                </div>
                            }

                            <!--back in stock subscription button-->
                            @if (!String.IsNullOrWhiteSpace(Model.StockAvailability) && Model.DisplayBackInStockSubscription)
                            {
                                <div class="back-in-stock-subscription-button-wrapper" title="@T("backinstocksubscriptions.notifymewhenavailable")">
                                    @await Html.PartialAsync("_BackInStockSubscription", Model)
                                </div>
                            }

                            <!--sample download-->
                            @{
                                var sampleDownloadButton = await Html.PartialAsync("_DownloadSample", Model);

                                if (!string.IsNullOrEmpty(await sampleDownloadButton.RenderHtmlContentAsync()))
                                {
                                    <div class="download-sample-button-wrapper" title="@T("products.downloadsample")">
                                        @sampleDownloadButton
                                    </div>
                                }
                            }

                        </div>
                    </div>

                    @if (quickViewSettings.ShowShortProductDescription || quickViewSettings.ShowFullProductDescription)
                    {
                        if (!String.IsNullOrEmpty(Model.ShortDescription) || !String.IsNullOrEmpty(Model.FullDescription))
                        {
                            <h3>@T("SevenSpikes.QuickView.Public.ProductDescription")</h3>
                            <div class="product-details">
                                @if (quickViewSettings.ShowShortProductDescription)
                                {
                                    <div class="short-description">
                                        @Html.Raw(Model.ShortDescription)
                                    </div>
                                }

                                @if (quickViewSettings.ShowFullProductDescription)
                                {
                                    <div class="full-description">
                                        @Html.Raw(Model.FullDescription)
                                    </div>
                                }
                            </div>
                        }
                    }



                    @if (quickViewSettings.ShowProductSpecification)
                    {
                        var productSpecificationsContent = await @Html.PartialAsync("_ProductSpecifications", Model.ProductSpecificationModel);

                        if (!string.IsNullOrEmpty(await productSpecificationsContent.RenderHtmlContentAsync()))
                        {
                            <h3>@T("SevenSpikes.QuickView.Public.ProductSpecifications")</h3>
                            <div class="product-details">
                                @productSpecificationsContent
                            </div>
                        }
                    }


                </div>
                <div class="links-panel">
                    <a href="@(Url.RouteUrl<Product>( new { SeName = Model.SeName }))" class="link-to-product-page">@T("SevenSpikes.QuickView.Public.GoToProductPageLink")</a>
                </div>
            </div>
        </div>

        @if (quickViewSettings.ShowRelatedProducts)
        {
            @await Component.InvokeAsync("RelatedProducts", new { productId = Model.Id })
        }

        @if (quickViewSettings.ShowProductsAlsoPurchased)
        {
            @await Component.InvokeAsync("ProductsAlsoPurchased", new { productId = Model.Id })
        }

    </form>
</div>