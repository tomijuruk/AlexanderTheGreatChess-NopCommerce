@model CategoryModel.SubCategoryModel
@inject IViewComponentSelector viewComponentSelector

@{
    string controllerName = Url.ActionContext.RouteData.Values["controller"].ToString();
    string actionName = Url.ActionContext.RouteData.Values["action"].ToString();
    var isHomePage = controllerName.Equals("home", StringComparison.InvariantCultureIgnoreCase) &&
                     actionName.Equals("index", StringComparison.InvariantCultureIgnoreCase);

    var categoryitemClass = string.Empty;
    if (isHomePage)
    {
        categoryitemClass = "category-item";
    }
    else
    {
        categoryitemClass = "sub-category-item";
    }
}

<div class="@categoryitemClass">
    <h2 class="title">
        <a href="@Url.RouteUrl("Category", new { SeName = Model.SeName })" title="@Model.PictureModel.Title">
            <span class="category-item-text-wrapper">
                <span class="category-item-name">@Model.Name</span>
                <span class="category-item-count">
                    @await Component.InvokeAsync("Widget", new { widgetZone = "uptown_category_box_products_count", additionalData = Model.Id }) @T("SevenSpikes.Themes.Uptown.Common.Products.Count.Title")
                </span>
            </span>
        </a>
    </h2>
    <div class="picture">
        <a href="@Url.RouteUrl("Category", new { SeName = Model.SeName })" title="@Model.PictureModel.Title">
            @if (viewComponentSelector.SelectComponent("LazyLoadImage") != null)
            {
                @await Component.InvokeAsync("LazyLoadImage", new (string Key, string Value)[]
                {
                    ("src", Model.PictureModel.ImageUrl),
                    ("alt", Model.PictureModel.AlternateText),
                    ("title", Model.PictureModel.Title)
                })
            }
            else
            {
                <img alt="@Model.PictureModel.AlternateText" src="@Model.PictureModel.ImageUrl" title="@Model.PictureModel.Title" />
            }
        </a>
    </div>
</div>