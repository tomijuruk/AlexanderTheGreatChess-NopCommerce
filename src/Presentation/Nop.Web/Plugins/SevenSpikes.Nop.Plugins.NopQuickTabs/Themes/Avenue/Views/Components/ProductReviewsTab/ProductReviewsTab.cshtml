@model Nop.Web.Models.Catalog.ProductReviewsModel

@inject Nop.Services.Html.IHtmlFormatter htmlFormatter
@inject CaptchaSettings captchaSettings

@{
    var publicKey = captchaSettings.ReCaptchaPublicKey ?? string.Empty;
}

<div id="updateTargetId" class="product-reviews-page">
    @if (Model.AddProductReview.SuccessfullyAdded)
    {
        <div class="submitReviewResult result">
            @Model.AddProductReview.Result
        </div>
    }
    else if (!Model.AddProductReview.CanAddNewReview)
    {
        <div class="result review-already-added">
            @T("Reviews.AlreadyAddedProductReviews")
        </div>
    }
    else
    {
        <div class="write-review" id="review-form">
            <button type="button" class="write-review-button">
                @T("SevenSpikes.Themes.Avenue.Reviews.WriteReviewButton")
            </button>
            <div class="review-form">
                <div class="form-wrapper">
                    <div asp-validation-summary="ModelOnly" class="message-error"></div>
                    <div class="fieldset">
                        <div class="form-fields">
                            <div class="inputs">
                                @*<label asp-for="AddProductReview.Title" asp-postfix=":"></label>*@
                                <input asp-for="AddProductReview.Title" class="review-title" placeholder="@T("Reviews.Fields.Title")" asp-disabled="@(!Model.AddProductReview.CanCurrentCustomerLeaveReview)" />
                                <nop-required />
                                <span asp-validation-for="AddProductReview.Title"></span>
                            </div>
                            <div class="inputs">
                                @*<label asp-for="AddProductReview.ReviewText" asp-postfix=":"></label>*@
                                <textarea asp-for="AddProductReview.ReviewText" class="review-text" placeholder="@T("Reviews.Fields.ReviewText")" asp-disabled="@(!Model.AddProductReview.CanCurrentCustomerLeaveReview)"></textarea>
                                <nop-required />
                                <span asp-validation-for="AddProductReview.ReviewText"></span>
                            </div>
                            <div class="review-rating">
                                <label asp-for="AddProductReview.Rating" asp-postfix=":"></label>
                                <div class="rating-options">
                                    <input asp-for="AddProductReview.Rating" value="1" type="radio" id="addproductrating_1" aria-label="@T("Reviews.Fields.Rating.Bad")" />
                                    <label for="addproductrating_1">1</label>
                                    <input asp-for="AddProductReview.Rating" value="2" type="radio" id="addproductrating_2" aria-label="@T("Reviews.Fields.Rating.NotGood")" />
                                    <label for="addproductrating_2">2</label>
                                    <input asp-for="AddProductReview.Rating" value="3" type="radio" id="addproductrating_3" aria-label="@T("Reviews.Fields.Rating.NotBadNotExcellent")" />
                                    <label for="addproductrating_3">3</label>
                                    <input asp-for="AddProductReview.Rating" value="4" type="radio" id="addproductrating_4" aria-label="@T("Reviews.Fields.Rating.Good")" />
                                    <label for="addproductrating_4">4</label>
                                    <input asp-for="AddProductReview.Rating" value="5" type="radio" id="addproductrating_5" aria-label="@T("Reviews.Fields.Rating.Excellent")" />
                                    <label for="addproductrating_5">5</label>
                                </div>
                            </div>
		                    @if (Model.ReviewTypeList.Count > 0)
	                        {
	                            foreach (var additionalReview in Model.AddAdditionalProductReviewList.OrderBy(ob => ob.DisplayOrder).ToList())
	                            {
	                                var curAdditionalReview = Model.AddAdditionalProductReviewList.IndexOf(additionalReview);
	                                <div class="review-rating">
                                        <label>@Html.Raw(additionalReview.Name):</label>
                                        <div class="rating-options">
                                            <input asp-for="@Model.AddAdditionalProductReviewList[curAdditionalReview].ReviewTypeId" value="@(additionalReview.ReviewTypeId)" type="hidden" />
                                            <input asp-for="@Model.AddAdditionalProductReviewList[curAdditionalReview].Name" value="@(additionalReview.Name)" type="hidden" />
                                            <input asp-for="@Model.AddAdditionalProductReviewList[curAdditionalReview].Description" value="@(additionalReview.Description)" type="hidden" />
                                            <input asp-for="@Model.AddAdditionalProductReviewList[curAdditionalReview].DisplayOrder" value="@(additionalReview.DisplayOrder)" type="hidden" />
                                            <input asp-for="@Model.AddAdditionalProductReviewList[curAdditionalReview].IsRequired" value="@(additionalReview.IsRequired)" type="hidden" />
                                            <input asp-for="@Model.AddAdditionalProductReviewList[curAdditionalReview].Rating" value="0" type="radio" id="addproductratingext_0_@(additionalReview.ReviewTypeId)" style="display: none;" />
                                            <label for="addproductratingext_0_@(additionalReview.ReviewTypeId)" style="display: none">0</label>
                                            <input asp-for="@Model.AddAdditionalProductReviewList[curAdditionalReview].Rating" value="1" type="radio" id="addproductratingext_1_@(additionalReview.ReviewTypeId)" />
                                            <label for="addproductratingext_1_@(additionalReview.ReviewTypeId)">1</label>
                                            <input asp-for="@Model.AddAdditionalProductReviewList[curAdditionalReview].Rating" value="2" type="radio" id="addproductratingext_2_@(additionalReview.ReviewTypeId)" />
                                            <label for="addproductratingext_2_@(additionalReview.ReviewTypeId)">2</label>
                                            <input asp-for="@Model.AddAdditionalProductReviewList[curAdditionalReview].Rating" value="3" type="radio" id="addproductratingext_3_@(additionalReview.ReviewTypeId)" />
                                            <label for="addproductratingext_3_@(additionalReview.ReviewTypeId)">3</label>
                                            <input asp-for="@Model.AddAdditionalProductReviewList[curAdditionalReview].Rating" value="4" type="radio" id="addproductratingext_4_@(additionalReview.ReviewTypeId)" />
                                            <label for="addproductratingext_4_@(additionalReview.ReviewTypeId)">4</label>
                                            <input asp-for="@Model.AddAdditionalProductReviewList[curAdditionalReview].Rating" value="5" type="radio" id="addproductratingext_5_@(additionalReview.ReviewTypeId)" />
                                            <label for="addproductratingext_5_@(additionalReview.ReviewTypeId)">5</label>
                                        </div>
	                                </div>
	                            }
	                        }
                            
                            @if (Model.AddProductReview.DisplayCaptcha)
                            {
                                if (captchaSettings.CaptchaType == CaptchaType.ReCaptchaV3)
                                {
                                    <input type="hidden" id="reviews-captcha-v3-enabled" value="true" />
                                    <input type="hidden" id="captcha-public-key" value="@publicKey" />
                                }
                                <nop-captcha />
                            }
                            
                        </div>
                    </div>
                    <div class="buttons">
                        @if (Model.AddProductReview.CanCurrentCustomerLeaveReview)
                        {
                            <button type="button" id="add-review" name="add-review" class="button-1 write-product-review-button">@T("Reviews.SubmitButton")</button>
                        }
                        else
                        {
                            <button type="button" id="add-review" disabled="disabled" name="add-review" class="button-1 write-product-review-button">@T("Reviews.SubmitButton")</button>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
    @if (Model.Items.Count > 0)
    {
        <div class="product-review-list">
            @foreach (var review in Model.Items)
            {
                var ratingPercent = review.Rating * 20;
                <div class="product-review-item">
                    <div class="review-item-head">
                        <div class="title">
                            <span>@review.Title</span>
                        </div>
                        <div class="rating-box">
                            <div class="rating-icons">
                                <div class="rating" style="width: @(ratingPercent)%">
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="review-content">
                        <div class="review-text">
                            @if (!string.IsNullOrEmpty(review.CustomerAvatarUrl))
                            {
                                <div class="review-avatar">
                                    @if (review.AllowViewingProfiles)
                                    {
                                        <a href="@Url.RouteUrl("CustomerProfile", new { id = review.CustomerId })" class="avatar-img-link">
                                            <img src="@(review.CustomerAvatarUrl)" class="avatar-img" alt="Avatar" />
                                        </a>
                                    }
                                    else
                                    {
                                        <img src="@(review.CustomerAvatarUrl)" class="avatar-img" alt="Avatar" />
                                    }
                                </div>
                            }
                            <div class="text-body">
                                @Html.Raw(htmlFormatter.FormatText(review.ReviewText, false, true, false, false, false, false))
                            </div>
                        </div>
                        @foreach (var reviewType in review.AdditionalProductReviewList.Where(x => x.Rating > 0 && x.VisibleToAllCustomers))
                        {
                            var ratingExtPercent = reviewType.Rating * 20;
                            <div class="review-item-head review-type-rating-ext">
                                <div class="title">
                                    <span>@reviewType.Name</span>
                                </div>
                                <div class="rating-box">
                                    <div class="rating-icons">
                                        <div class="rating" style="width: @(ratingExtPercent)%">
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                        <div class="review-info">
                            <div class="product-review-info">
                                <span class="user">
                                    <label>@T("Reviews.From"):</label>
                                    @if (review.AllowViewingProfiles)
                                    {
                                        <a href="@Url.RouteUrl("CustomerProfile", new { id = review.CustomerId })">@(review.CustomerName)</a>
                                    }
                                    else
                                    {
                                        @review.CustomerName
                                    }
                                </span>
                                <span class="separator">|</span>
                                <span class="date">
                                    <label>@T("Reviews.Date"):</label>
                                    <span>@review.WrittenOnStr</span>
                                </span>
                            </div>
                            @await Component.InvokeAsync(Components.ProductReviewHelpfulnessTab, review.Helpfulness)
                        </div>
                        @await Component.InvokeAsync("Widget", new { widgetZone = "productreviews_page_inside_review", additionalData = review.Id })
                        @if (!string.IsNullOrEmpty(review.ReplyText))
                        {
                            <div class="reply">
                                <div class="reply-wrapper">
                                    <div class="reply-header">
                                        @T("Reviews.Reply")
                                    </div>
                                    <div class="reply-text">
                                        @Html.Raw(htmlFormatter.FormatText(review.ReplyText, false, true, false, false, false, false))
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    }
</div>
