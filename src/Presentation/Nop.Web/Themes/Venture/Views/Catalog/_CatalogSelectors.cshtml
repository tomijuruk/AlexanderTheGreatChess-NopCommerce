@model CatalogProductsModel

@using Nop.Core
@using Nop.Services.Configuration

@inject IStoreContext storeContext
@inject ISettingService settingService

@if (Model.Products.Count <= 0 &&
     !Model.PriceRangeFilter.Enabled &&
     !Model.SpecificationFilter.Enabled &&
     !Model.ManufacturerFilter.Enabled)
{
    return;
}

@{
    int storeId = (await storeContext.GetCurrentStoreAsync()).Id;
    bool enableGridNumberSwitch = await settingService.GetSettingByKeyAsync("venturethemesettings.allowcustomerstoswitchcategorygriditemsnumber", true, storeId, true);
    string gridNuberOfItems = await settingService.GetSettingByKeyAsync("venturethemesettings.categorygriditemsnumber", "items-3", storeId, true);

    if (enableGridNumberSwitch)
    {
        string gridNumberOfItemsCookie = Context.Request.Cookies["venture_catalog_grid_viewmode_items"];

        if (!string.IsNullOrEmpty(gridNumberOfItemsCookie))
        {
            int.TryParse(gridNumberOfItemsCookie, out int value);

            if (value == 3 || value == 4)
            {
                gridNuberOfItems = "items-" + value;
            }
        }
    }

    bool compareProductsEnabled = await settingService.GetSettingByKeyAsync("catalogsettings.compareproductsenabled", true, storeId, true);
}

<div class="product-selectors">

    <div class="filters-button-wrapper">
        <button class="filters-button">@T("SevenSpikes.Themes.Venture.Common.Filter")</button>
    </div>

    @*view mode*@
    @if (Model.AllowProductViewModeChanging)
    {
        <div class="product-viewmode">
            @if (Model.AvailableViewModes.Count > 1)
            {
                SelectListItem gridMode = Model.AvailableViewModes[0];
                SelectListItem listMode = Model.AvailableViewModes[1];

                if (enableGridNumberSwitch)
                {
                    <a title="@gridMode.Text" data-viewmode="@gridMode.Value" class="viewmode-icon grid hidden" style="display: none;"></a>
                    
                    <span data-items="3" title="3 @T("SevenSpikes.Themes.Venture.Common.ItemsInGrid") @gridMode.Text" class="grid items-3 @if(gridMode.Selected && gridNuberOfItems == "items-3"){<text>selected</text>}">3 @T("SevenSpikes.Themes.Venture.Common.ItemsInGrid") @gridMode.Text</span>
                    <span data-items="4" title="4 @T("SevenSpikes.Themes.Venture.Common.ItemsInGrid") @gridMode.Text" class="grid items-4 @if(gridMode.Selected && gridNuberOfItems == "items-4"){<text>selected</text>}">4 @T("SevenSpikes.Themes.Venture.Common.ItemsInGrid") @gridMode.Text</span>
                }
                else
                {
                    if (gridNuberOfItems == "items-3")
                    {
                        <a title="@gridMode.Text"  data-viewmode="@gridMode.Value" class="viewmode-icon grid items-3 @if(gridMode.Selected && gridNuberOfItems == "items-3"){<text>selected</text>}" tabindex="0" aria-role="button" href="#">3 @T("SevenSpikes.Themes.Venture.Common.ItemsInGrid") @gridMode.Text</a>
                    }
                    else
                    {
                        <a title="@gridMode.Text"  data-viewmode="@gridMode.Value" class="viewmode-icon grid items-4 @if(gridMode.Selected && gridNuberOfItems == "items-4"){<text>selected</text>}" tabindex="0" aria-role="button" href="#">4 @T("SevenSpikes.Themes.Venture.Common.ItemsInGrid") @gridMode.Text</a>
                    }
                }

                <a title="@listMode.Text" data-viewmode="@listMode.Value" class="viewmode-icon list @if(listMode.Selected){<text>selected</text>}" tabindex="0" aria-role="button" href="#">@listMode.Text</a>
            }
        </div>
        <script asp-location="Footer">
            $(document).ready(function () {
                $(CatalogProducts).on('before', function (e) {
                    var $viewModeEl = $('[data-viewmode].selected');
                    console.log($viewModeEl);
                    if ($viewModeEl)
                    {
                        e.payload.urlBuilder
                            .addParameter('viewmode', $viewModeEl.data('viewmode'));
                    }
                });
            });
        </script>
    }
    @if(compareProductsEnabled)
    { 
        <div class="compare-products-link">
            <a href="@Url.RouteUrl("CompareProducts")">@T("Products.Compare.List")</a>
        </div>
    }
    @*page size*@
    @if (Model.AllowCustomersToSelectPageSize)
    {
        <div class="product-page-size">
            <select id="products-pagesize" name="products-pagesize" aria_label="@T("Catalog.OrderBy.Label")">
                @for (int i = 0; i < Model.PageSizeOptions.Count; i++)
                {
                    SelectListItem currentOption = Model.PageSizeOptions[i];
                    string isSelected = currentOption.Selected ? "selected='selected'" : string.Empty;

                    <!option value="@currentOption.Value" @Html.Raw(isSelected)>@currentOption.Text @T("Catalog.PageSize.PerPage")</!option>
                }
            </select>
            <script asp-location="Footer">
                $(document).ready(function () {
                    var $pageSizeEl = $('#products-pagesize');
                    $pageSizeEl.on('change', function () {
                        CatalogProducts.getProducts();
                    });

                    $(CatalogProducts).on('before', function (e) {
                        e.payload.urlBuilder
                            .addParameter('pagesize', $pageSizeEl.val());
                    });
                });
            </script>
        </div>
    }
    @*sorting*@
    @if (Model.AllowProductSorting)
    {
        <div class="product-sorting">
            @Html.DropDownList("products-orderby", Model.AvailableSortOptions, new { aria_label = T("Catalog.OrderBy.Label") })
        </div>
        <script asp-location="Footer">
            $(document).ready(function () {
                var $orderByEl = $('#products-orderby');
                $orderByEl.on('change', function () {
                    CatalogProducts.getProducts();
                });

                $(CatalogProducts).on('before', function (e) {
                    e.payload.urlBuilder
                        .addParameter('orderby', $orderByEl.val());
                });
            });
        </script>
    }
</div>