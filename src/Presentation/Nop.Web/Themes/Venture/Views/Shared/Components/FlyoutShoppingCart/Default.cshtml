@model MiniShoppingCartModel

@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Services.Catalog

@inject IWorkContext workContext
@inject IPriceFormatter priceFormatter

@{
    if (String.IsNullOrEmpty(Model.SubTotal))
    {
        Model.SubTotal = await priceFormatter.FormatPriceAsync(0m, false, (await workContext.GetWorkingCurrencyAsync()).CurrencyCode, (await workContext.GetWorkingLanguageAsync()).Id, true);
    }
}
<div class="cart-wrapper" id="flyout-cart" data-removeItemFromCartUrl="@Url.Action("RemoveItemFromCart", "VentureTheme")" data-flyoutCartUrl="@Url.Action("FlyoutShoppingCart", "VentureTheme")">
    <div id="topcartlink">
        <a href="@Url.RouteUrl("ShoppingCart")" class="ico-cart">
            @T("ShoppingCart")<span id="CartQuantityBox" class="cart-qty"><span class="cart-qty-number">@Model.TotalProducts</span></span>
            <span class="cart-total">@Model.SubTotal</span>
        </a>
    </div>
    <div class="flyout-cart">
        <div class="mini-shopping-cart">
            <div class="count">
                @if (Model.TotalProducts == 0)
                {
                    @T("ShoppingCart.Mini.NoItems")
                }
                else
                {
                    @Html.Raw(string.Format(T("ShoppingCart.Mini.ItemsText").Text, $"<a href=\"{Url.RouteUrl("ShoppingCart")}\">{string.Format(T("ShoppingCart.Mini.Items").Text, Model.TotalProducts)}</a>"))
                }
            </div>
            @if (Model.TotalProducts > 0)
            {
                <div class="items">
                    @for (var i = 0; i < Model.Items.Count; i++)
                	{
                    	var item = Model.Items[i];
                        <div class="item @(i == 0 ? "first" : null)" data-shoppingCartId="@item.Id">
                            @if (Model.ShowProductImages)
                            {
                                <div class="picture">
                                    <a href="@(Url.RouteUrl<Product>(new { SeName = item.ProductSeName }))" title="@item.Picture.Title">
                                        <img alt="@item.Picture.AlternateText" src="@item.Picture.ImageUrl" title="@item.Picture.Title" />
                                    </a>
                                </div>
                            }
                            <div class="product">
                                <div class="name">
                                    <a href="@(Url.RouteUrl<Product>(new { SeName = item.ProductSeName }))">@item.ProductName</a>
                                </div>
                                @if (!string.IsNullOrEmpty(item.AttributeInfo))
                                {
                                    <div class="attributes">
                                        @Html.Raw(item.AttributeInfo)
                                    </div>
                                }
                                <div class="price"><span>@item.UnitPrice</span></div>
                                <div class="quantity">@T("ShoppingCart.Mini.Quantity"): <span>@item.Quantity</span></div>
                            </div>
                            <a href="#" class="mini-shopping-cart-item-close">@T("common.remove")</a>
                        </div>
                    }
                </div>
                <div class="totals">
                    <span>@T("ShoppingCart.Totals.SubTotal")</span>
                    <strong>@Model.SubTotal</strong>
                </div>
	            <div class="buttons">
	                @if (Model.DisplayShoppingCartButton)
	                {
	                    <button type="button" class="button-1 cart-button" onclick="setLocation('@(Url.RouteUrl("ShoppingCart"))')">@T("ShoppingCart.Mini.ViewCart")</button>
	                }
	                @if (Model.DisplayCheckoutButton)
	                {
	                    var checkoutUrl = "";
	                    if (Model.AnonymousCheckoutAllowed && Model.CurrentCustomerIsGuest)
	                    {
	                        checkoutUrl = Url.RouteUrl("LoginCheckoutAsGuest", new { returnUrl = Url.RouteUrl("ShoppingCart") });
	                    }
	                    else
	                    {
	                        checkoutUrl = Url.RouteUrl("Checkout");
	                    }
	                    <button type="button" class="button-1 checkout-button" onclick="setLocation('@checkoutUrl')">@T("Checkout.Button")</button>
	                }
	            </div>
            }
        </div>
    </div>
</div>