@using Nop.Core
@using Nop.Services.Configuration
@inject IStoreContext storeContext
@inject ISettingService settingService

@{
    Layout = "_Root";

    //current category ID
    var currentCategoryId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("category", StringComparison.InvariantCultureIgnoreCase))
    {
        currentCategoryId = Convert.ToInt32(Url.ActionContext.RouteData.Values["categoryId"].ToString());
    }

    var controllerName = Url.ActionContext.RouteData.Values["controller"].ToString();
    var actionName = Url.ActionContext.RouteData.Values["action"].ToString();

    //current manufacturer ID
    var currentManufacturerId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("manufacturer", StringComparison.InvariantCultureIgnoreCase))
    {
        currentManufacturerId = Convert.ToInt32(Url.ActionContext.RouteData.Values["manufacturerId"].ToString());
    }

    //current product ID
    var currentProductId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("product", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("productdetails", StringComparison.InvariantCultureIgnoreCase))
    {
        currentProductId = Convert.ToInt32(Url.ActionContext.RouteData.Values["productId"].ToString());
    }

    int storeId = (await storeContext.GetCurrentStoreAsync()).Id;

    bool enableGridNumberSwitch = await settingService.GetSettingByKeyAsync("venturethemesettings.allowcustomerstoswitchcategorygriditemsnumber", true, storeId, true);
    string gridNuberOfItemsViewMode = await settingService.GetSettingByKeyAsync("venturethemesettings.categorygriditemsnumber", "items-3", storeId, true);

    if (enableGridNumberSwitch)
    {
        string gridNumberOfItemsCookie = Context.Request.Cookies["venture_catalog_grid_viewmode_items"];

        if (!string.IsNullOrEmpty(gridNumberOfItemsCookie))
        {
            int.TryParse(gridNumberOfItemsCookie, out int value);

            if (value == 3 || value == 4)
            {
                gridNuberOfItemsViewMode = "items-" + value;
            }
        }
    }

    var isAccountPage = (controllerName.Equals("customer", StringComparison.InvariantCultureIgnoreCase) && (
            actionName.Equals("info", StringComparison.InvariantCultureIgnoreCase) ||
            actionName.Equals("addresses", StringComparison.InvariantCultureIgnoreCase) ||
            actionName.Equals("addressadd", StringComparison.InvariantCultureIgnoreCase) ||
            actionName.Equals("addressedit", StringComparison.InvariantCultureIgnoreCase) ||
            actionName.Equals("gdprtools", StringComparison.InvariantCultureIgnoreCase) ||
            actionName.Equals("downloadableproducts", StringComparison.InvariantCultureIgnoreCase) ||
            actionName.Equals("changepassword", StringComparison.InvariantCultureIgnoreCase) ||
            actionName.Equals("avatar", StringComparison.InvariantCultureIgnoreCase))) ||
            actionName.Equals("customerproductreviews", StringComparison.InvariantCultureIgnoreCase) ||
            controllerName.Equals("pricematch", StringComparison.InvariantCultureIgnoreCase) ||
            controllerName.Equals("helpdesk", StringComparison.InvariantCultureIgnoreCase) ||
            controllerName.Equals("vendor", StringComparison.InvariantCultureIgnoreCase) &&
                            actionName.Equals("info", StringComparison.InvariantCultureIgnoreCase) ||
            (controllerName.Equals("backinstocksubscription", StringComparison.InvariantCultureIgnoreCase) &&
                            actionName.Equals("customersubscriptions", StringComparison.InvariantCultureIgnoreCase)) ||
            (controllerName.Equals("order", StringComparison.InvariantCultureIgnoreCase) &&
                            actionName.Equals("customerorders", StringComparison.InvariantCultureIgnoreCase)) ||
            (controllerName.Equals("order", StringComparison.InvariantCultureIgnoreCase) &&
                            actionName.Equals("customerrewardpoints", StringComparison.InvariantCultureIgnoreCase)) ||
            (controllerName.Equals("boards", StringComparison.InvariantCultureIgnoreCase) &&
                            actionName.Equals("customerforumsubscriptions", StringComparison.InvariantCultureIgnoreCase)) ||
            (controllerName.Equals("returnrequest", StringComparison.InvariantCultureIgnoreCase) &&
                            actionName.Equals("customerreturnrequests", StringComparison.InvariantCultureIgnoreCase));
}

@if (IsSectionDefined("Breadcrumb"))
{
    @section Breadcrumb {
        @RenderSection("Breadcrumb")
    } 
}

@if (!isAccountPage)
{
    <div class="center-2 @gridNuberOfItemsViewMode">
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.MainColumnBefore })
        @RenderBody()
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.MainColumnAfter })
    </div>
    <div class="side-2">
        @if (IsSectionDefined("left"))
        {
            @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.LeftSideColumnBefore })
	        @await RenderSectionAsync("left")
            @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.LeftSideColumnAfter })
        }
        else
        {
            @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.LeftSideColumnBefore })
            <div class="blocks-wrapper">
                @await RenderSectionAsync("CatalogFilters", false)
                @await Component.InvokeAsync(typeof(CategoryNavigationViewComponent), new { currentCategoryId = currentCategoryId, currentProductId = currentProductId })
                @*@await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.LeftSideColumnAfterCategoryNavigation })*@
                @await Component.InvokeAsync(typeof(ManufacturerNavigationViewComponent), new { currentManufacturerId = currentManufacturerId })
                @await Component.InvokeAsync(typeof(VendorNavigationViewComponent))
                @await Component.InvokeAsync(typeof(RecentlyViewedProductsBlockViewComponent), new { productThumbPictureSize = 64 })
                @await Component.InvokeAsync(typeof(PopularProductTagsViewComponent))
                @await Component.InvokeAsync(typeof(PollBlockViewComponent), new { systemKeyword = "LeftColumnPoll" })
            </div>
            @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.LeftSideColumnAfter })
        }
    </div>
}
else
{
    <div class="side-2">
        @if (IsSectionDefined("left"))
        {
            @RenderSection("left")
        }
    </div>
    <div class="center-2">
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.MainColumnBefore })
        @RenderBody()
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.MainColumnAfter })
    </div>
}
