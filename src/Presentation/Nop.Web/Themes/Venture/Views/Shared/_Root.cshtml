@using Nop.Services.Security;

@inject IPermissionService permissionService

@{
    Layout = "_Root.Head";

    var shoppingCartEnabled = await permissionService.AuthorizeAsync(StandardPermissionProvider.EnableShoppingCart);
}

@await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.BodyStartHtmlTagAfter })
@{ await Html.RenderPartialAsync("_Notifications"); }
@{ await Html.RenderPartialAsync("_JavaScriptDisabledWarning"); }
@{ await Html.RenderPartialAsync("_OldInternetExplorerWarning"); }
<div class="master-wrapper-page">
    @await Component.InvokeAsync(typeof(AdminHeaderLinksViewComponent))
    @{ await Html.RenderPartialAsync("_Header"); }
    <script asp-location="Footer">
        var localized_data = {
            AjaxCartFailure: "@T("AjaxCart.Failure")"
        };
        AjaxCart.init(false, '.cart-qty', '.wishlist-qty', '#flyout-cart', localized_data);
    </script>
    <div class="overlayOffCanvas"></div>
    <div class="responsive-nav-wrapper-parent">
        <div class="responsive-nav-wrapper">
            <div class="menu-title">
                <span>@T("SevenSpikes.Themes.Common.MenuTitle")</span>
            </div>
            <div class="mobile-logo">
                @await Component.InvokeAsync(typeof(LogoViewComponent))
            </div>
            <div class="search-wrap">
                <span>@T("Search")</span>
            </div>
            @if (shoppingCartEnabled)
            {
                <div class="shopping-cart-link">
                    <a href="@Url.RouteUrl("ShoppingCart")">@T("ShoppingCart")</a>
                </div>
            }
        </div>
    </div>
    <div class="master-wrapper-content">
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ContentBefore })
        
        @await RenderSectionAsync("Breadcrumb", false)

        <div class="master-column-wrapper">
            @RenderBody()
        </div>
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ContentAfter })
    </div>
    @await Component.InvokeAsync(typeof(FooterViewComponent))
</div>
@await Component.InvokeAsync(typeof(EuCookieLawViewComponent))
@await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.BodyEndHtmlTagBefore })
