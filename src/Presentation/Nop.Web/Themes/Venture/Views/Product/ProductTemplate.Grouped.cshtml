@model ProductDetailsModel

@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Seo
@using Nop.Services.Configuration
@using Nop.Services.Html

@inject CatalogSettings catalogSettings
@inject IHtmlFormatter htmlFormatter
@inject ISettingService settingService
@inject IStoreContext  storeContext
@inject IViewComponentSelector viewComponentSelector
@inject IWebHelper webHelper
@inject SeoSettings seoSettings

@{
    Layout = "_ColumnsOne";

    //title
    NopHtml.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    NopHtml.AddMetaDescriptionParts(Model.MetaDescription);
    NopHtml.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    NopHtml.AppendPageCssClassParts("html-product-details-page");

    //canonical URL
    if (seoSettings.CanonicalUrlsEnabled)
    {
        var productUrl = Url.RouteUrl<Product>(new { SeName = Model.SeName }, webHelper.GetCurrentRequestProtocol()).ToLowerInvariant();
        NopHtml.AddCanonicalUrlParts(productUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    var showShareButton = catalogSettings.ShowShareButton;

    //open graph META tags
    if (seoSettings.OpenGraphMetaTags)
    {
        NopHtml.AddHeadCustomParts("<meta property=\"og:type\" content=\"product\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Html.Encode(htmlFormatter.StripTags(Model.MetaDescription)) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:image:url\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + webHelper.GetThisPageUrl(false) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
    }

    //Twitter META tags
    if (seoSettings.TwitterMetaTags)
    {
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Html.Encode(htmlFormatter.StripTags(Model.MetaDescription)) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + webHelper.GetThisPageUrl(false) + "\" />");
    }
}

@{
    var productTabs = await Component.InvokeAsync("Widget", new { widgetZone = "seven_spikes_product_tabs", additionalData = Model });
    var storeId = (await storeContext.GetCurrentStoreAsync()).Id;

    var productsTabAreEnabled = !string.IsNullOrEmpty(await productTabs.RenderHtmlContentAsync());

    var isDescriptionTabEnabled = await settingService.GetSettingByKeyAsync("tabsettings.enableproductfulldescriptiontab", false, storeId, true);
    var isSpecificationsTabEnabled = await settingService.GetSettingByKeyAsync("tabsettings.enableproductspecificationstab", false, storeId, true);

    var shouldShowDescription = !string.IsNullOrEmpty(Model.FullDescription) && (!productsTabAreEnabled || !isDescriptionTabEnabled);
    var shouldShowSpecifications = !productsTabAreEnabled || !isSpecificationsTabEnabled;
}

<!--product breadcrumb-->
@section Breadcrumb
{
    @await Html.PartialAsync("_ProductBreadcrumb", Model.Breadcrumb)
}
@await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsAfterBreadcrumb, additionalData = Model })
<div class="page product-details-page grouped-product-details-page">
    <div class="page-body">
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsTop, additionalData = Model })
        <form asp-route="Product" asp-route-sename="@Model.SeName" method="post" id="product-details-form">
            @if (seoSettings.MicrodataEnabled)
            {
                @await Html.PartialAsync("_Microdata", Model)
            }
            <div class="product-essential-wrapper">
                <div class="product-essential">
                    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsEssentialTop, additionalData = Model })
                    <div class="gallery">
                        @{
                            var cloudZoom = await Component.InvokeAsync("Widget", new { widgetZone = "sevenspikes_cloud_zoom", additionalData = Model });
                        }
                        @if (!String.IsNullOrEmpty(await cloudZoom.RenderHtmlContentAsync()))
                        {
                            @cloudZoom
                            @await Html.PartialAsync("_ProductDetailsVideos", Model)
                        }
                        else
                        {
                            <!--product pictures-->
                            @await Html.PartialAsync("_ProductDetailsPictures", Model)
                            <!--product videos-->
                            @await Html.PartialAsync("_ProductDetailsVideos", Model)
                        }
                    </div>
                    <div class="overview">
                        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsOverviewTop, additionalData = Model })

                        <div class="product-name">
                            <h1>
                                @Model.Name
                            </h1>
                        </div>

                        @await Html.PartialAsync("_Discontinued", Model)

                        <!--product manufacturers-->
                        @await Html.PartialAsync("_ProductManufacturers", Model.ProductManufacturers)

                        <!--product reviews-->
                        @await Html.PartialAsync("_ProductReviewOverview", Model.ProductReviewOverview)

                        @if (!string.IsNullOrEmpty(Model.ShortDescription))
                        {
                            <div class="short-description">
                                @Html.Raw(Model.ShortDescription)
                            </div>
                        }

                        <!--compare, email a friend-->
                        <div class="overview-buttons">
                            @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsBefore, additionalData = Model })

                            <!--compare button-->
                            @if (Model.CompareProductsEnabled)
                            {
                                <div class="compare-products-wrapper" title="@T("products.compare.addtocomparelist")">
                                    @await Html.PartialAsync("_CompareProductsButton", Model)
                                </div>
                            }

                            <!--email a friend button-->
                            @if (Model.EmailAFriendEnabled)
                            {
                                <div class="email-a-friend-button-wrapper" title="@T("products.emailafriend")">
                                    @await Html.PartialAsync("_ProductEmailAFriendButton", Model)
                                </div>
                            }  

                            @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsAfter, additionalData = Model })
                        </div>
                            
                        @await Component.InvokeAsync("Widget", new { widgetZone = "venture_theme_submit_ticket_product_page_button", additionalData = Model.Id })

                        @if (showShareButton)
                        {
                            @await Html.PartialAsync("_ShareButton", Model)
                        }
                        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsOverviewBottom, additionalData = Model })
                    </div>
                    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsEssentialBottom, additionalData = Model })
                </div>
            </div>
            <div class="product-page-bottom">
                @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsBeforeCollateral, additionalData = Model })

                @if (productsTabAreEnabled)
                {
                    @productTabs
                }
                <div class="product-collateral">
                    @if (shouldShowDescription)
                    {
                        <div class="full-description-wrapper">
                            <div class="title">
                                <strong>@T("SevenSpikes.Themes.Venture.Common.ProductPageFullDescription")</strong>
                            </div>
                            <div class="full-description">
                                @Html.Raw(Model.FullDescription)
                            </div>
                        </div>
                    }
                    <!--associated products-->
                    <div class="product-variant-list">
                        @foreach (var variant in Model.AssociatedProducts)
                        {
                            <div class="product-variant-line" data-productid="@variant.Id">
                                @if (!string.IsNullOrWhiteSpace(variant.DefaultPictureModel.ImageUrl))
                                {
                                    <div class="variant-picture">
                                        @if (viewComponentSelector.SelectComponent("LazyLoadImage") != null)
                                        {
                                            @await Component.InvokeAsync("LazyLoadImage", new(string Key, string Value)[] 
                                            {
                                                ("src", variant.DefaultPictureModel.ImageUrl),
                                                ("alt", variant.DefaultPictureModel.AlternateText),
                                                ("title", variant.DefaultPictureModel.Title),
                                                ("id", "main-product-img-" + variant.Id)
                                            })
                                        }
                                        else
                                        {
                                            <img alt="@variant.DefaultPictureModel.AlternateText" src="@variant.DefaultPictureModel.ImageUrl" title="@variant.DefaultPictureModel.Title" id="main-product-img-@variant.Id" />
                                        }
                                    </div>
                                }
                                <div class="variant-overview">
                                    @if (!string.IsNullOrWhiteSpace(variant.Name))
                                    {
                                        <div class="variant-name">
                                            @variant.Name
                                        </div>
                                    }
                                    @if (!string.IsNullOrWhiteSpace(variant.ShortDescription))
                                    {
                                        <div class="variant-description">
                                            @Html.Raw(variant.ShortDescription)
                                        </div>
                                    }

                                    <!--SKU, MAN, GTIN, vendor-->
                                    @await Html.PartialAsync("_SKU_Man_GTIN_Ven", variant)

                                    <!--delivery-->
                                    @await Html.PartialAsync("_DeliveryInfo", variant)                           

                                    <!--price breaks-->
                                    @await Html.PartialAsync("_ProductTierPrices", variant.TierPrices)

                                    <!--attributes-->
                                    @{
                                        var dataDictAttributes = new ViewDataDictionary(ViewData);
                                        dataDictAttributes.TemplateInfo.HtmlFieldPrefix = $"attributes_{variant.Id}";
                                        @await Html.PartialAsync("_ProductAttributes", variant, dataDictAttributes)
                                    }
                                    <!--rental info-->
                                    @{
                                        var dataDictRental = new ViewDataDictionary(ViewData);
                                        dataDictRental.TemplateInfo.HtmlFieldPrefix = $"rental_{variant.Id}";
                                        @await Html.PartialAsync("_RentalInfo", variant, dataDictRental)
                                    }
                                    <!--availability-->
                                    @if (!String.IsNullOrWhiteSpace(Model.StockAvailability))
                                    {
                                        <div class="availability">
                                            <div class="stock">
                                                <span class="label">@T("Products.Availability"):</span>
                                                <span class="value" id="stock-availability-value-@variant.Id">@variant.StockAvailability</span>
                                            </div>
                                        </div>
                                    }

                                    <!--gift card-->
                                    @{
                                        var dataDictGiftCard = new ViewDataDictionary(ViewData);
                                        dataDictGiftCard.TemplateInfo.HtmlFieldPrefix = $"giftcard_{variant.Id}";
                                        @await Html.PartialAsync("_GiftCardInfo", variant.GiftCard, dataDictGiftCard)
                                    }

                                    <!--minimum quantity notification-->
                                    @if (!String.IsNullOrEmpty(Model.AddToCart.MinimumQuantityNotification))
                                    {
                                        <div class="min-qty-notification">@Model.AddToCart.MinimumQuantityNotification</div>
                                    }

                                    <div class="variant-overview-footer">
                                        <!--price-->
                                        @{
                                            var dataDictPrice = new ViewDataDictionary(ViewData);
                                            dataDictPrice.TemplateInfo.HtmlFieldPrefix = $"price_{variant.Id}";
                                            @await Html.PartialAsync("_ProductPrice", variant.ProductPrice, dataDictPrice)
                                        }
                                        <div class="overview-buttons variant-overview-buttons">
                                            @{
                                                var dataDictAddToCart = new ViewDataDictionary(ViewData);
                                                dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = string.Format("addtocart_{0}", variant.Id);
                                                @await Html.PartialAsync("_AddToCart", variant.AddToCart, dataDictAddToCart)
                                            }

                                            <!--sample download button-->
                                            @if (Model.HasSampleDownload)
                                            {
                                                <div class="download-sample-button-wrapper" title="@T("products.downloadsample")">
                                                    @await Html.PartialAsync("_DownloadSample", variant)
                                                </div>
                                            }

                                            <!--back in stock subscription button-->
                                            @if (variant.DisplayBackInStockSubscription)
                                            {
                                                <div class="back-in-stock-subscription-button-wrapper" title="@T("backinstocksubscriptions.notifymewhenavailable")">
                                                    @await Html.PartialAsync("_BackInStockSubscription", variant)
                                                </div>
                                            }

                                            <!--wishlist-->
                                            @if (!Model.AddToCart.DisableWishlistButton)
                                            {
                                                <div class="wishlist-button-wrapper" title="@T("products.wishlist.addtowishlist")">
                                                    @{
                                                        var dataDictAddToWishlist = new ViewDataDictionary(ViewData);
                                                        dataDictAddToWishlist.TemplateInfo.HtmlFieldPrefix = $"addtocart_{variant.Id}";
                                                        @await Html.PartialAsync("_AddToWishlist", variant.AddToCart, dataDictAddToWishlist)
                                                    }
                                                </div>
                                            }
                                        </div>
                                        <!--estimate shipping-->
                                        @{
                                            var dataDictEstimateShipping = new ViewDataDictionary(ViewData);
                                            dataDictEstimateShipping.TemplateInfo.HtmlFieldPrefix = $"estimate_shipping_{variant.Id}";
                                            @await Html.PartialAsync("_ProductEstimateShipping", variant.ProductEstimateShipping, dataDictEstimateShipping)
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                        @if (Model.AssociatedProducts.Count == 0)
                        {
                            <div class="no-associated-products">
                                @T("Products.NoAssociatedProducts")
                            </div>
                        }
                    </div>
                    @await Html.PartialAsync("_ProductSpecifications", Model.ProductSpecificationModel)
                    @await Html.PartialAsync("_ProductTags", Model.ProductTags)
                </div>
                @*we do not display "also purchased" for grouped products
                @await Component.InvokeAsync(typeof(ProductsAlsoPurchasedViewComponent), new { productId = Model.Id })*@
                @await Component.InvokeAsync(typeof(RelatedProductsViewComponent), new { productId = Model.Id })
            </div>
        </form>
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsBottom, additionalData = Model })
    </div>
</div>
